// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Snappy.API.Data;

#nullable disable

namespace Snappy.API.Migrations
{
    [DbContext(typeof(SnappyDBContext))]
    partial class SnappyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("Snappy.API.Models.AuthToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReplacedByTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("Snappy.API.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MessagePayload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderCopyKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderCopyPayload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6c755f3-51e7-48dd-9b3a-c173b618bab4"),
                            CreatedOn = new DateTime(2021, 12, 27, 21, 4, 55, 304, DateTimeKind.Utc).AddTicks(5290),
                            MessageKey = "messageKey",
                            MessagePayload = "Hi kyle, how are you doing?",
                            ReceiverId = new Guid("ad194377-d21e-46ec-a142-80a8e4236cf7"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "Hi kyle, how are you doing?",
                            SenderId = new Guid("4f169ea5-e573-4507-a62a-b74e61b8352c"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("514a087c-2c5c-4273-852d-b9647cff6c88"),
                            CreatedOn = new DateTime(2021, 12, 27, 21, 5, 55, 304, DateTimeKind.Utc).AddTicks(5300),
                            MessageKey = "messageKey",
                            MessagePayload = "I am doing great! Hbu?",
                            ReceiverId = new Guid("4f169ea5-e573-4507-a62a-b74e61b8352c"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "I am doing great! Hbu?",
                            SenderId = new Guid("ad194377-d21e-46ec-a142-80a8e4236cf7"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e4462d86-bf11-4ae6-b586-c5ad928664bc"),
                            CreatedOn = new DateTime(2021, 12, 27, 21, 6, 55, 304, DateTimeKind.Utc).AddTicks(5310),
                            MessageKey = "messageKey",
                            MessagePayload = "Great as well!",
                            ReceiverId = new Guid("ad194377-d21e-46ec-a142-80a8e4236cf7"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "Great as well!",
                            SenderId = new Guid("4f169ea5-e573-4507-a62a-b74e61b8352c"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a68cd8b3-de5c-4687-b775-e4bffbd4d5a8"),
                            CreatedOn = new DateTime(2021, 12, 27, 21, 5, 55, 304, DateTimeKind.Utc).AddTicks(5310),
                            MessageKey = "messageKey",
                            MessagePayload = "Hi marcus, how are you doing?",
                            ReceiverId = new Guid("4f169ea5-e573-4507-a62a-b74e61b8352c"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "Hi kyle, how are you doing?",
                            SenderId = new Guid("3e1be469-2608-454d-8f86-7fa0e6242929"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("19dabd46-f88e-4dbf-a692-59985487c8d5"),
                            CreatedOn = new DateTime(2021, 12, 27, 21, 7, 55, 304, DateTimeKind.Utc).AddTicks(5310),
                            MessageKey = "messageKey",
                            MessagePayload = "I am doing great! Hbu?",
                            ReceiverId = new Guid("3e1be469-2608-454d-8f86-7fa0e6242929"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "I am doing great! Hbu?",
                            SenderId = new Guid("4f169ea5-e573-4507-a62a-b74e61b8352c"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9f020a88-1a0c-497e-93b0-49f49e1c55c2"),
                            CreatedOn = new DateTime(2021, 12, 27, 21, 9, 55, 304, DateTimeKind.Utc).AddTicks(5320),
                            MessageKey = "messageKey",
                            MessagePayload = "Great as well!",
                            ReceiverId = new Guid("4f169ea5-e573-4507-a62a-b74e61b8352c"),
                            SenderCopyKey = "senderKey",
                            SenderCopyPayload = "Great as well!",
                            SenderId = new Guid("3e1be469-2608-454d-8f86-7fa0e6242929"),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Snappy.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TwoFactorKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f169ea5-e573-4507-a62a-b74e61b8352c"),
                            Active = true,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Marcus",
                            LastName = "Orciuch",
                            Password = "LHy2L5PJ3CQKfPJInHesZDF3A46DzJ9kcIAdKh4LJps=",
                            PublicKey = "key",
                            Salt = "sllNIW/h0hpFVYUCSANGIQ==",
                            TwoFactorKey = "7NNMK5OAHEAWQRVNVH6LUNZEWUUEZZGZ",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "marcus"
                        },
                        new
                        {
                            Id = new Guid("ad194377-d21e-46ec-a142-80a8e4236cf7"),
                            Active = true,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kyle",
                            LastName = "Orciuch",
                            Password = "c1bCSyyfCBrncjHd21bR4yDB/t4gKTd+1Vxs76+bdOs=",
                            PublicKey = "key",
                            Salt = "JWYpy9YEzRpqVLYl6oVesw==",
                            TwoFactorKey = "KC4OJ4AX6UGDRV7UISSWQ3GLCSTYHKIX",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "kyle"
                        },
                        new
                        {
                            Id = new Guid("3e1be469-2608-454d-8f86-7fa0e6242929"),
                            Active = true,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Patrick",
                            LastName = "Mansour",
                            Password = "5gPhSOtYNknJrdkL8CkXR+n4X1Cw8r8Eryut84Ugyn4=",
                            PublicKey = "key",
                            Salt = "yMQxyBY/bNL1STLI/6VTQA==",
                            TwoFactorKey = "2DWYCISPHOCQHELY7VU25NE4VPDS5SQP",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "patrick"
                        });
                });

            modelBuilder.Entity("Snappy.API.Models.AuthToken", b =>
                {
                    b.HasOne("Snappy.API.Models.AuthToken", "ReplacedByToken")
                        .WithMany()
                        .HasForeignKey("ReplacedByTokenId");

                    b.HasOne("Snappy.API.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplacedByToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Snappy.API.Models.Message", b =>
                {
                    b.HasOne("Snappy.API.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snappy.API.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Snappy.API.Models.User", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
